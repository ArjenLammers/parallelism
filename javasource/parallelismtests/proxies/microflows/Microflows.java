// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package parallelismtests.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the ParallelismTests module
	public static void iVK_StartBlockingThreadsIssue(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ParallelismTests.IVK_StartBlockingThreadsIssue").withParams(params).execute(context);
	}
	public static void iVK_StopThreads(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ParallelismTests.IVK_StopThreads").withParams(params).execute(context);
	}
	public static void iVK_TestAsyncPattern(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ParallelismTests.IVK_TestAsyncPattern").withParams(params).execute(context);
	}
	public static void iVK_TestBackgroundLong(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ParallelismTests.IVK_TestBackgroundLong").withParams(params).execute(context);
	}
	public static void iVK_TestBackgroundShort(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ParallelismTests.IVK_TestBackgroundShort").withParams(params).execute(context);
	}
	public static boolean parallel_BlockingIssue(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("ParallelismTests.Parallel_BlockingIssue").withParams(params).execute(context);
	}
	public static parallelismtests.proxies.ExampleResult parallel_SendMessage(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("ParallelismTests.Parallel_SendMessage").withParams(params).execute(context);
		return result == null ? null : parallelismtests.proxies.ExampleResult.initialize(context, result);
	}
	public static boolean parallel_WaitingLong(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("ParallelismTests.Parallel_WaitingLong").withParams(params).execute(context);
	}
	public static boolean parallel_WaitingShort(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("ParallelismTests.Parallel_WaitingShort").withParams(params).execute(context);
	}
	public static void sub_Process(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ParallelismTests.Sub_Process").withParams(params).execute(context);
	}
	public static void sub_SetError(IContext context, parallelismtests.proxies.TestOrder _testOrder, java.lang.String _errorMessage)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TestOrder", _testOrder == null ? null : _testOrder.getMendixObject());
		params.put("ErrorMessage", _errorMessage);
		Core.microflowCall("ParallelismTests.Sub_SetError").withParams(params).execute(context);
	}
	public static void sub_ThrowError(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ParallelismTests.Sub_ThrowError").withParams(params).execute(context);
	}
}
